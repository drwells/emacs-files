;------------------------------------------------------------------------------
; my .emacs file!! yaaaay
;------------------------------------------------------------------------------
; remember - to reload, do M-x load-file <enter> <enter> (default name is
; current file)
;------------------------------------------------------------------------------
; Preferences
;------------------------------------------------------------------------------
(toggle-scroll-bar -1)              ; turn off the scrollbar.
(tool-bar-mode -1)                  ; turn off the tool bar.
(menu-bar-mode -1)                  ; turn off the menu bar.
(fset 'yes-or-no-p 'y-or-n-p)       ; instead of yes-or-no do y-or-n
(setq inhibit-startup-message t)    ; turn off splash screen
(show-paren-mode t)                 ; show matching parenthesis
(setq-default indent-tabs-mode nil) ; these four set tabs to 4 spaces
(setq-default tab-width 4)
(global-font-lock-mode t)        ; these three turn on syntax highlighting
(load-library "font-lock")
(setq font-lock-maximum-decoration t)
; delete whitespace when exiting
(add-hook 'before-save-hook (lambda () (delete-trailing-whitespace)))
; fix comments
(require 'newcomment)
(setq comment-auto-fill-only-comments 1)
(setq-default auto-fill-function 'do-auto-fill)
; turn on automatic line wrapping at 79 - because it is 1980 and I am clearly
; using a teletype.
(setq-default fill-column 79)
; show column position.
(column-number-mode)

;-----------------------------------------------------------------------------
; load plugins.
;-----------------------------------------------------------------------------
(let ((default-directory "~/.emacs.d/"))
  (normal-top-level-add-subdirs-to-load-path))
(let ((default-directory "~/.emacs.d/plugins/"))
  (normal-top-level-add-subdirs-to-load-path))

;-----------------------------------------------------------------------------
; Basic display options - line numbers, color
;-----------------------------------------------------------------------------
(setq inhibit-x-resources t)
(require 'linum) ; line numbers
(when (featurep 'linum) (global-linum-mode 1))
(require 'color-theme)
(color-theme-initialize)
(color-theme-comidia)
(set-face-attribute 'default nil
                    :family "Monospace" :height 110)
; only modify the syntax highlighting if in gui mode
(if window-system
    (progn (set-face-background 'default "grey12")
           ; italicize comments
           (copy-face 'italic 'font-lock-comment-face)
           ; back to orange.
           (set-face-foreground 'font-lock-comment-face "#ff7f24")
           nil))

(setq evil-repeat-move-cursor nil) ; on the . command do not move cursor
(require 'evil)
(evil-mode 1)
(require 'surround) ; add surround.
(global-surround-mode 1)
; yasnippet, cuz snippets rock.
(require 'yasnippet)
(yas/initialize)
(yas/load-directory "~/.emacs.d/plugins/yasnippet-snippets/snippets") ; local
(setq yas/indent-line 'fixed)
(require 'autopair)
(add-hook 'haskell-mode-hook (lambda () (autopair-mode)))
(add-hook 'python-mode-hook (lambda () (autopair-mode)))
(add-hook 'c-mode-common-hook (lambda () (autopair-mode)))
(add-hook 'emacs-lisp-mode-hook (lambda () (autopair-mode)))
(add-hook 'lisp-interaction-mode-hook (lambda () (autopair-mode)))

;-----------------------------------------------------------------------------
; LaTeX mode stuff
;-----------------------------------------------------------------------------
(load "auctex.el" nil t t)
(load "preview-latex.el" nil t t)
(add-to-list 'auto-mode-alist '("/*.\.tex$" . LaTeX-mode))
(setq-default TeX-master nil)
(setq TeX-parse-self t)
(setq TeX-auto-save t)
; turn off the stupid resizing 'features'
(add-hook 'LaTeX-mode-hook (setq font-latex-fontify-script nil))
(add-hook 'LaTeX-mode-hook (setq font-latex-fontify-sectioning 'color))
(add-hook 'LaTeX-mode-hook 'font-latex-update-sectioning-faces)
(add-hook 'LaTeX-mode-hook 'font-lock-fontify-buffer)
; try to get auto fill mode to work right.
(add-hook 'LaTeX-mode-hook 'turn-on-auto-fill)

;-----------------------------------------------------------------------------
; org-mode stuff
;-----------------------------------------------------------------------------
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(setq org-log-done t) ; display timestamp when I complete something
(setq org-agenda-files '("~/org/work.org" "/org/school.org" "/org/home.org"))

;-----------------------------------------------------------------------------
; Python stuff.
;-----------------------------------------------------------------------------
; fix sage
(setq auto-mode-alist (append '(("/*.\.sage$" . python-mode))
  auto-mode-alist))
(autoload 'python-mode "python-mode.el" "Python mode... ENGAGED" t)
(setq auto-mode-alist (append '(("/*.\.py$" . python-mode)) auto-mode-alist))
(put 'downcase-region 'disabled nil)

;-----------------------------------------------------------------------------
; GNU/Octave and MATLAB Stuffs.
;-----------------------------------------------------------------------------
(add-to-list 'auto-mode-alist '("/*.\.m$" . octave-mode))

;-----------------------------------------------------------------------------
; D stuff.
;-----------------------------------------------------------------------------
(autoload 'd-mode "d-mode" "Major mode for editing D code." t)
(add-to-list 'auto-mode-alist '("\.d[i]?\'" . d-mode))
(add-to-list 'auto-mode-alist '("/*.\.d$" . d-mode))

;-----------------------------------------------------------------------------
; Scheme stuff.
;-----------------------------------------------------------------------------
(setq scheme-program-name "guile")

;-----------------------------------------------------------------------------
; Haskell stuff.
;-----------------------------------------------------------------------------
(setq auto-mode-alist (append '(("/*.\.hs$" . haskell-mode)) auto-mode-alist))
(setq haskell-program-name "/usr/bin/ghci")
(add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
(add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
(require 'inf-haskell)

; stuff for aquamacs. Ensure that this is the last line so that all
; the variables are reset correctly.
(if (boundp 'aquamacs-version) (load "~/.aquamacs") nil)
