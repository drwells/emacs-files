;-----------------------------------------------------------------------------
; my .emacs file!! yaaaay
;-----------------------------------------------------------------------------
; remember - to reload, do M-x load-file <enter> <enter> (default name is
; current file)
;-----------------------------------------------------------------------------
; Preferences
;-----------------------------------------------------------------------------
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)       ; instead of yes-or-no do y-or-n
(setq inhibit-startup-message t)    ; turn off splash screen
(show-paren-mode t)                 ; show matching parenthesis
(setq-default indent-tabs-mode nil) ; these four set tabs to 4 spaces
(setq-default tab-width 4)
(global-font-lock-mode t)           ; these three turn on syntax highlighting
(load-library "font-lock")
(setq font-lock-maximum-decoration t)
; fix comments
(require 'newcomment)
; make the font size right.
(set-face-attribute 'default nil :height 115)
; ido mode
(ido-mode 1)
(setq ido-enable-flex-matching t)

; Pagewise formatting
(add-hook 'text-mode-hook 'auto-fill-mode) ; wrap long lines.
; turn on automatic line wrapping at 79 - because it is 1980 and I am clearly
; using a teletype.
(setq-default fill-column 79)
(setq fill-column 79)
; delete whitespace when exiting
(add-hook 'before-save-hook (lambda () (delete-trailing-whitespace)))

; load plugins.
(let ((default-directory "~/.emacs.d/"))
  (normal-top-level-add-subdirs-to-load-path))
(load "~/.emacs.d/display.el")
(load "~/.emacs.d/editing.el")

; org-mode stuff
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(setq org-log-done t) ; display timestamp when I complete something
(setq org-agenda-files '("~/org/work.org" "/org/school.org" "/org/home.org"))

; Python stuff.
; fix sage
(setq auto-mode-alist (append '(("/*.\.sage$" . python-mode))
  auto-mode-alist))
(autoload 'python-mode "python-mode.el" "Python mode... ENGAGED" t)
(setq auto-mode-alist (append '(("/*.\.py$" . python-mode)) auto-mode-alist))
(put 'downcase-region 'disabled nil)

; D stuff.
(autoload 'd-mode "d-mode" "Major mode for editing D code." t)
(add-to-list 'auto-mode-alist '("\.d[i]?\'" . d-mode))
(add-to-list 'auto-mode-alist '("/*.\.d$" . d-mode))

; Scheme stuff.
(setq scheme-program-name "guile")

; C stuff.
(setq c-default-style "linux" c-basic-offset 4)

; Haskell stuff.
(setq auto-mode-alist (append '(("/*.\.hs$" . haskell-mode)) auto-mode-alist))
(setq haskell-program-name "/usr/bin/ghci")
(add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
(add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
(require 'inf-haskell)

; stuff for aquamacs. Ensure that this is the last line so that all
; the variables are reset correctly.
(if (boundp 'aquamacs-version) (load "~/.aquamacs") nil)
